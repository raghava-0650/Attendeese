// src/pages/Subjects.jsx
import React, { useEffect, useState } from 'react';
import Layout from '../components/Layout';
import axios from 'axios';
import { getAuth } from 'firebase/auth';

const auth = getAuth();

export default function Subjects() {
  // Form state
  const [subjectName, setSubjectName] = useState("");
  const [attended, setAttended] = useState("");
  const [absent, setAbsent] = useState("");
  const [hourDuration, setHourDuration] = useState("1");
  const [note, setNote] = useState("");

  // Data state
  const [subjects, setSubjects] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");

  // UI state
  const [isAdding, setIsAdding] = useState(false);
  const [editingIndex, setEditingIndex] = useState(null);
  const [editingSubject, setEditingSubject] = useState(null);
  const [isDeleteVisible, setIsDeleteVisible] = useState(false);
  const [deleteIndex, setDeleteIndex] = useState(null);

  // Fetch subjects on mount & auth change
  useEffect(() => {
    const unsub = auth.onAuthStateChanged(async (user) => {
      if (!user) {
        setSubjects([]);
        return;
      }
      try {
        const token = await user.getIdToken(true);
        const res = await axios.get('http://localhost:4000/subjects', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setSubjects(res.data || []);
      } catch (e) {
        console.error('Fetch subjects error:', e);
      }
    });
    return unsub;
  }, []);

  // Helpers
  const pct = (att, abs, hr) => {
    const total = Number(att) + Number(abs);
    return total ? ((att * hr) / (total * hr) * 100).toFixed(2) : 0;
  };
  const colorFor = (p) => p < 75 ? 'red-500' : p < 90 ? 'yellow-500' : 'green-500';

  // Add (optimistic)
  const handleAdd = async () => {
    if (!subjectName.trim()) return;

    // 1) Create a temp object
    const tempId = Date.now().toString();
    const newSub = {
      _id: tempId,
      name: subjectName.trim(),
      attended: Number(attended) || 0,
      absent:   Number(absent)   || 0,
      hourDuration: Number(hourDuration) || 1,
      note: note.trim()
    };

    // 2) Optimistically insert
    setSubjects(prev => [...prev, newSub]);

    // 3) Reset form & close modal
    setSubjectName(""); setAttended(""); setAbsent("");
    setHourDuration("1"); setNote(""); setIsAdding(false);

    // 4) POST to server
    try {
      const user = auth.currentUser;
      if (!user) throw new Error("Sign in required");
      const token = await user.getIdToken(true);
      const { data } = await axios.post(
        'http://localhost:4000/subjects',
        {
          name: newSub.name,
          attended: newSub.attended,
          absent: newSub.absent,
          hourDuration: newSub.hourDuration,
          note: newSub.note
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      // 5) Replace temp with server version
      setSubjects(prev =>
        prev.map(s => s._id === tempId ? data : s)
      );
    } catch (e) {
      console.error('Add subject error:', e);
      // you could remove the temp item here if desired
    }
  };

  // Start edit
  const handleEdit = (idx) => {
    setEditingIndex(idx);
    setEditingSubject({ ...subjects[idx] });
  };
  // Save edit
  const handleSaveEdit = async () => {
    const updated = [...subjects];
    try {
      const user = auth.currentUser;
      if (!user) throw new Error('Sign in required');
      const token = await user.getIdToken(true);
      const { data } = await axios.put(
        `http://localhost:4000/subjects/${editingSubject._id}`,
        editingSubject,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      updated[editingIndex] = data;
    } catch (e) {
      console.error('Update subject error:', e);
      // fallback: update locally
      updated[editingIndex] = editingSubject;
    }
    setSubjects(updated);
    setEditingIndex(null);
    setEditingSubject(null);
  };

  // Delete
  const confirmDelete = (idx) => {
    setDeleteIndex(idx);
    setIsDeleteVisible(true);
  };
  const doDelete = async () => {
    try {
      const user = auth.currentUser;
      if (!user) throw new Error('Sign in required');
      const token = await user.getIdToken(true);
      const id = subjects[deleteIndex]._id;
      await axios.delete(
        `http://localhost:4000/subjects/${id}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
    } catch (e) {
      console.error('Delete subject error (server):', e);
    }
    setSubjects(prev => prev.filter((_, i) => i !== deleteIndex));
    setIsDeleteVisible(false);
    setDeleteIndex(null);
  };

  // Totals
  const totals = subjects.reduce((acc, s) => {
    const a = Number(s.attended)    || 0;
    const b = Number(s.absent)      || 0;
    const h = Number(s.hourDuration)|| 1;
    acc.attended += a * h;
    acc.conducted += (a + b) * h;
    return acc;
  }, { attended: 0, conducted: 0 });
  totals.pct = totals.conducted
    ? ((totals.attended / totals.conducted) * 100).toFixed(2)
    : 0;

  // Filter
  const shown = subjects.filter(s =>
    typeof s.name === 'string' &&
    s.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <Layout>
      <div className="p-6 w-full">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Subjects</h1>
          <div className="flex items-center space-x-4">
            <input
              type="text"
              placeholder="Search..."
              value={searchQuery}
              onChange={e => setSearchQuery(e.target.value)}
              className="border p-2 rounded"
            />
            <button
              onClick={() => setIsAdding(true)}
              className="bg-blue-600 text-white px-4 py-2 rounded"
            >
              Add Subject
            </button>
          </div>
        </div>

        {/* Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {/* Total Card */}
          <div className="bg-white p-4 rounded shadow border-l-4 border-blue-500">
            <h2 className="font-bold mb-2">Total</h2>
            <p>Hours Attended: <span className="font-medium">{totals.attended}</span></p>
            <p>Hours Conducted: <span className="font-medium">{totals.conducted}</span></p>
            <p>Attendance %: <span className="font-medium">{totals.pct}%</span></p>
          </div>

          {/* Subject Cards */}
          {shown.map((s, i) => {
            const p = pct(s.attended, s.absent, s.hourDuration);
            const c = colorFor(p);
            return (
              <div key={i} className={`bg-white p-4 rounded shadow border-l-4 border-${c}`}>
                {editingIndex === i ? (
                  <>
                    <input
                      className="w-full mb-2 border p-1 rounded"
                      value={editingSubject.name}
                      onChange={e => setEditingSubject({ ...editingSubject, name: e.target.value })}
                    />
                    <input
                      type="number"
                      className="w-full mb-2 border p-1 rounded"
                      value={editingSubject.attended}
                      onChange={e => setEditingSubject({ ...editingSubject, attended: e.target.value })}
                    />
                    <input
                      type="number"
                      className="w-full mb-2 border p-1 rounded"
                      value={editingSubject.absent}
                      onChange={e => setEditingSubject({ ...editingSubject, absent: e.target.value })}
                    />
                    <input
                      type="number"
                      className="w-full mb-2 border p-1 rounded"
                      value={editingSubject.hourDuration}
                      onChange={e => setEditingSubject({ ...editingSubject, hourDuration: e.target.value })}
                    />
                    <textarea
                      className="w-full mb-2 border p-1 rounded"
                      value={editingSubject.note || ''}
                      onChange={e => setEditingSubject({ ...editingSubject, note: e.target.value })}
                    />
                    <div className="flex justify-end space-x-2">
                      <button onClick={() => setEditingIndex(null)} className="text-gray-600">Cancel</button>
                      <button onClick={handleSaveEdit} className="text-green-600">Save</button>
                    </div>
                  </>
                ) : (
                  <>
                    <h3 className="font-bold text-lg">{s.name}</h3>
                    <p>Attended: {s.attended}</p>
                    <p>Absent: {s.absent}</p>
                    <p>Hour: {s.hourDuration}</p>
                    <p>Attendece %: {p}%</p>
                    <div className="flex justify-end space-x-2 mt-2">
                      <button onClick={() => handleEdit(i)} className="text-blue-600">Edit</button>
                      <button onClick={() => confirmDelete(i)} className="text-red-600">Delete</button>
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>

        {/* Add Modal */}
        {isAdding && (
          <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded shadow-lg w-full max-w-md">
              <h2 className="font-bold mb-4 text-xl">Add Subject</h2>
              <input
                className="w-full mb-2 border p-2 rounded"
                placeholder="Name"
                value={subjectName}
                onChange={e => setSubjectName(e.target.value)}
              />
              <input
                type="number"
                className="w-full mb-2 border p-2 rounded"
                placeholder="Attended"
                value={attended}
                onChange={e => setAttended(e.target.value)}
              />
              <input
                type="number"
                className="w-full mb-2 border p-2 rounded"
                placeholder="Absent"
                value={absent}
                onChange={e => setAbsent(e.target.value)}
              />
              <input
                type="number"
                className="w-full mb-2 border p-2 rounded"
                placeholder="Hour Duration"
                value={hourDuration}
                onChange={e => setHourDuration(e.target.value)}
              />
              <textarea
                className="w-full mb-4 border p-2 rounded"
                placeholder="Note (optional)"
                value={note}
                onChange={e => setNote(e.target.value)}
              />
              <div className="flex justify-end space-x-2">
                <button onClick={() => setIsAdding(false)} className="px-4 py-2 bg-gray-200 rounded">Cancel</button>
                <button onClick={handleAdd} className="px-4 py-2 bg-blue-600 text-white rounded">Add</button>
              </div>
            </div>
          </div>
        )}

        {/* Delete Confirmation */}
        {isDeleteVisible && (
          <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded shadow-lg w-full max-w-sm">
              <h2 className="font-semibold mb-4 text-lg">Confirm Delete</h2>
              <p className="mb-6">Are you sure you want to delete this subject?</p>
              <div className="flex justify-end space-x-2">
                <button onClick={() => setIsDeleteVisible(false)} className="px-4 py-2 bg-gray-200 rounded">Cancel</button>
                <button onClick={doDelete} className="px-4 py-2 bg-red-600 text-white rounded">Delete</button>
              </div>
            </div>
          </div>
        )}
      </div>
    </Layout>
  );
}
